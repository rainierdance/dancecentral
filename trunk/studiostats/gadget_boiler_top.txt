<!--
/***********************************************
  Copyright 2012 Rainier Dance, LLC.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
**************************************************/
-->

<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="Rainier Dance Studio Management - Stats"
             description="Rainier Dance Studio Management"
             author="Rainier Dance, LLC."
             >
<Require feature="idi"/>
<Require feature="setprefs" />
<Require feature="locked-domain" />
</ModulePrefs>
<UserPref name="dataUrl" display_name="Data url"
          required="true"/>
<UserPref name="data1Url" display_name="Data 1 url"
          required="false"/>
<UserPref name="data2Url" display_name="Data 2 url"
          required="false"/>
<Content type="html"><![CDATA[
<script src="https://www.google.com/jsapi" type="text/javascript"></script>

<script>
function escapeHtml(text) {
  if (text == null) {
    return '';
  }
  //return _hesc(text);
  return text;
}

/**
 * Load the APIs and run sendStudentQuery when the load is complete
 */
var gadgetHelper = null;
var dataUrls = [];
var dataIndex = 0;

_IG_RegisterOnloadHandler(loadVisualizationAPI);
function loadVisualizationAPI() {
  google.load("visualization", "1");

  var dataurl = prefs.getString('dataUrl');
  dataUrls.push(dataurl);

  dataurl = prefs.getString('data1Url');
  if (dataurl && (dataurl.length > 0)) 
    dataUrls.push(dataurl);

  dataurl = prefs.getString('data2Url');
  if (dataurl && (dataurl.length > 0)) 
    dataUrls.push(dataurl);

  google.setOnLoadCallback(sendDataQuery);
}

/**
 * Create a query (shaped by the Gadget's user preferences), then
 * send it to the spreadsheet data source. Also give the name of a
 * function ("handleQueryResponse") to run once the spreadsheet data
 * is retrieved:
 */
var prefs = new _IG_Prefs(); // User preferences

// new form data
function sendDataQuery() {
  prefs.set('_table_query_url', dataUrls[dataIndex++]);
  gadgetHelper = new google.visualization.GadgetHelper();
  var query = gadgetHelper.createQueryFromPrefs(prefs);
  query.send(handleDataQueryResponse);
}

function handleDataQueryResponse(response) {
  if (!gadgetHelper.validateResponse(response)) {
    return;     // Default error handling was done, just leave.
  }
  var data = response.getDataTable();
  for (var row = 0; row < data.getNumberOfRows(); row++) {
    var cols = [];
    for (var col = 0; col < data.getNumberOfColumns(); col++) {
      cols.push(data.getFormattedValue(row,col).replace(/^\s+|\s+$/g,""));
    }
    addRawEntry(cols);
  }

  if (dataIndex >= dataUrls.length)
    initData();
  else // get more data
    sendDataQuery();
}
</script>

