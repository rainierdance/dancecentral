<?xml version="1.0" encoding="UTF-8"?>
<Module>
<ModulePrefs title="DanceCentral.info Connecting Figures" />
<UserPref name="dance" display_name="Dance" default_value="Quickstep"/>
<UserPref name="figureName" display_name="Figure Name" default_value="all"/>
<Content type="html"><![CDATA[
<head>
  <base target="_top" />
  <LINK REL=StyleSheet HREF="http://dancecentral.googlecode.com/svn/trunk/figures.css" TYPE="text/css"/>
  <script type="text/javascript" src="http://dancecentral.googlecode.com/svn/trunk/quickstep.js"></script>
  <script type="text/javascript" src="http://dancecentral.googlecode.com/svn/trunk/rumba.js"></script>
  <script type="text/javascript">
    //-------------------------------------------
    // globals
    var IS_GADGET = true; 
    var VERSION = "v1.0118.1910";  // major.MMDD.HHMM
    var ID_ANALYTICS = "UA-9375974-3";

    var LEVELS = ['Newcomer', 'Bronze', 'Silver', 'Gold', 'Open'];
    var COLOR_MAP = {
      'Newcomer' : 'Navy',
      'Bronze' : 'SaddleBrown',
      'Silver' : 'Silver',
      'Gold' : 'OrangeRed',
      'Open' : 'DarkGreen'
    };

    //-------------------------------------------
    var inputFigureName = 'NaturalTurn';
    var inputDance = 'Quickstep';
    var mode = 'browse'; // vs. "routine" for building a routine
    var isLatinDance = false; // do not show starting direction for Latin dances
    var DANCE_MAP;
    var URL_BASE;
    var figures;  // all figues in the selected dance
    var sortedIds = []; // display figures in alphabetically order
    var selectedFigureName = inputFigureName; // current selected figure name

    //-------------------------------------------
    // one-time initialization after scripts are loaded
    function initVars() {
      if (IS_GADGET) {
        inputFigureName = '__UP_figureName__';
        inputDance = '__UP_dance__';
      }

      DANCE_MAP  = {
        'Quickstep' : {
          'urlprefix' : 'quickstep',
          'figures' : quickstepFigures,
          'type' : 'standard'
        },
        'Rumba' : {
          'urlprefix' : 'rumba',
          'figures' : rumbaFigures,
          'type' : 'latin'
        }
      };

      isLatinDance = DANCE_MAP[inputDance]['type'] == 'latin';
      URL_BASE = 'http://www.dancecentral.info/ballroom/international-style/' + DANCE_MAP[inputDance]['urlprefix'];    
      figures = DANCE_MAP[inputDance]['figures'];
      selectedFigureName = inputFigureName; 

      sortedIds = []; // display figures in alphabetically order
      for (var id in figures) {
        sortedIds.push(id);
      }
      sortedIds.sort();
    }
         
    //-------------------------------------------
    // Utitilies 
    function log(msg) {
      var debugElement = document.getElementById('debugOutput');
      if (debugElement) {
        var now = new Date();
        debugElement.innerHTML = '[' + now.getHours() + ':' +
          now.getMinutes() + ':' + now.getSeconds() + '] ' + 
          msg + '\n' + debugElement.innerHTML;
      }
    }

    function setCookie(name, value) {
      var expireDate = new Date();
      expireDate.setDate(expireDate.getDate() + 1000);
      document.cookie = cookiePrefix + "_" + name + "=" + escape(value) +
        ";expires=" + expireDate.toGMTString();
    } 
       
    function getCookie(name) {
      if (document.cookie.length == 0)
        return '';
      var cookieName = cookiePrefix +  "_" + name;
      var start = document.cookie.indexOf(cookieName + "=");
      if (start == -1)
        return '';
      start = start + cookieName.length + 1;

      var end = document.cookie.indexOf(";", start);
      if (end == -1)
        end = document.cookie.length;
      return unescape(document.cookie.substring(start, end));
    }
    
    function contains(list, value) {
      if (list instanceof Array) {
        return list.indexOf(value) != -1;
      } else {
        return list == value;
      }
    }
    
    function removeValue(list, value){
      var i = list.indexOf(value);
      while (i != -1) { // remove all occurences
        list.splice(i, 1);
        i = list.indexOf(value);
      }
    }
    
    //----------------------------------------     
    // return true if figure matches level
    function MatchLevel(figure) {
      var levelElement = document.getElementById(figure['level']);
      return levelElement && levelElement.checked;
    }

    // return true if figure matches level and additional criteria
    function MatchFigure(figure, criteria) {
      if (!figure) return true; // undefined yet.

      if (!MatchLevel(figure)) return false;

      if (!criteria) return true;

      for (var key in criteria) {
        if (!contains(figure[key], criteria[key]))
          return false;
      }
      return true;
    }

    // returns matching figures, this is eval'ed, not directly called in the source
    function MatchFigures(criteria) {
      var result = []; // array of figure IDs that matched criteria
      for (var id in figures) {
        var figure = figures[id];
        if (MatchFigure(figure, criteria))
          result.push(id);
      }
      return result;
    }

    // initialize display
    function initDisplay() {     
      var output = [];

      // initialize levels
      var element = document.getElementById('divLevels');
      output = [inputDance + ' levels: '];
      LEVELS.forEach(function (level) {
        output.push('<input type=checkbox id="' + level + '" onclick="updateFigureList();" checked>' + 
          '<span style="color:' + COLOR_MAP[level] + '">' + level + '</span> &nbsp;');
      });
      output.push('<br>');
      element.innerHTML = output.join('');

      if (isLatinDance) {
        document.getElementById('divSelectFigure').style.display = 'none';
      } 
      document.getElementById('divVersion').innerHTML = VERSION;
          
      updateFigureList();
    }

    function resetFigureListIndex() {
      document.getElementById('figureName').selectedIndex = 0;
    }
        
    function resetStartingPoint() {
      document.getElementById('startAlignment').selectedIndex = 0;
      document.getElementById('startFoot').selectedIndex = 0;
      document.getElementById('startDirection').selectedIndex = 0;
    }
    
    // update the list of figues in the Figures drop down, update view as well
    function updateFigureList() {
     var output = [];

      output.push('Figures: <select id="figureName" onchange="resetStartingPoint();updateView();">');
      output.push('<option>all</option>');
      sortedIds.forEach(function (id) {
        if (!document.getElementById(figures[id]['level']).checked) return;
        output.push('<option value="' + id + '" ');
        if (selectedFigureName != 'all' && (figures[id]['name'] == selectedFigureName || id == selectedFigureName))
          output.push('selected');
        output.push('>' + figures[id]['name'] + '</option>');
      });
      output.push('</select>');
      document.getElementById('divFiguresList').innerHTML = output.join('');

      updateView();
    }

    // returns the html for the figure name with its link
    // inPage: go to local anchor, otherwise, go to figure details page
    function getFigureLink(figureID, inPage) {
      var output = [];
      var figure = figures[figureID];
      if (figure) {
        if (!figure['name'])
          figure['name'] = figureID; // default
        if (figure['urlpath']) {
          output.push('<a style="color:' + COLOR_MAP[figure['level']] + '"');
          output.push(' onclick="return onClickFigure(\'' + figureID + '\');" ');
          //output.push('target="windowDetails" ');
          if (inPage)
            output.push(' target="_self" href="#section_' + figureID);
          else
            output.push(' href="' + URL_BASE + figure['urlpath']);
          //output.push('?tmpl=/system/app/templates/print/');
          output.push('">' + figure['name'] + '</a>');
        } else {
          output.push(figure['name']);
        }
      } else {
        output.push(figureID);
      }
      return output.join('');
    }
  
    // returns an array of following figures: [followID, comment] 
    function getFollows(figure) {
        // get all ids, some are evaluating
        var follows = [];
        figure['follow'].forEach(function (nextFigure) {
          var ids = [];
          var evalStr = nextFigure['eval'];
          if (evalStr) {
            ids = eval(evalStr);
          } else { // check id 
            if (nextFigure['id'])
              ids.push(nextFigure['id']);
          }
          // filter out dups
          ids.forEach(function (followID) {
            var followFigure = figures[followID];
            if (MatchLevel(followFigure))
              follows.push([followID, nextFigure['comment']]);
          });
        });
        return follows;
    }
    
    // diagraph turns out to be too complicated for it to be useful
    // leave it here for future
/*
    function outputDotSource() {
      var output = [];
      output.push('digraph ConnectingFigures {');
      output.push('labelloc=t;');
      output.push('node [color=black, fontcolor=black];');

      output.push('label="Title";');
      sortedIds.forEach(function (id) {
        var figure = figures[id];
        if (!MatchFigure(figure)) return; // pass UI filter
        output.push(id + '[label="' + figure['name'] + '"];');
        var follows = getFollows(figure);

        follows.forEach(function (follow) {
          output.push(id + ' -> ' + follow[0] + ';');
        });
       });
      output.push('}');
      document.getElementById('dotOutput').value = output.join('');
    }
     
    function outputCSV() {
      var output = [];
      sortedIds.forEach(function (id) {
        var figure = figures[id];
        output.push(id);
        output.push(figure['name']);
        output.push(figure['urlpath']);
        output.push(figure['level']);
        output.push(figure['startAlignment']);
        output.push(figure['startFoot']);
        output.push(figure['startDirection']);
        var follows = figures['follow'];
        follows.forEach(function (follow) {
          output.push(follow[0] + '/' + follow[1]);
        });
       });
      output.push('}');
      document.getElementById('dotOutput').value = output.join('');
    }
*/
    function continueRoutine() {
      mode = 'routine';
      document.getElementById('idPauseRoutine').style.display = 'inline';
      document.getElementById('idContinueRoutine').style.display = 'none';
    }

    function pauseRoutine() {
      mode = 'browse';
      document.getElementById('idPauseRoutine').style.display = 'none';
      document.getElementById('idContinueRoutine').style.display = 'inline';
    }

    // start a new routine
    function startRoutine() {
      mode = 'routine';

      // keep selected level, reset other criteria
      resetFigureListIndex();
      resetStartingPoint();
      updateView();

      var element = document.getElementById('spanRoutine');
      element.innerHTML = '';

      // other controls
      document.getElementById('idStartRoutine').style.display = 'inline';
      document.getElementById('idPauseRoutine').style.display = 'inline';
      document.getElementById('idContinueRoutine').style.display = 'none';
    }

    // select the specified figure in figure drop down list and update view
    function selectFigure(figureID) {
      var selectedFigureElement = document.getElementById('figureName');
      for (var i = 0; i< selectedFigureElement.options.length; i++) {
        if (selectedFigureElement.options[i].value == figureID) {
          selectedFigureElement.selectedIndex = i;
          break;
        }
      }
      updateView();
    }

    // when building routine, this is called when user clicks on a figure name
    function onClickFigure(figureID) {
      if (mode != 'routine') return true; // continue with the link

      // update the routine list
      var output = [];
      var figure = figures[figureID];
      output.push('<li><a href="' + URL_BASE + figure['urlpath'] + '">' + figure['name'] + '</a> &nbsp;&nbsp; </li>');
      var element = document.getElementById('spanRoutine');
      var content = element.innerHTML.replace(/^<ol>/, '').replace(/<\/ol>$/, '');
      element.innerHTML = '<ol>' + content + output.join('') + '</ol>';

      // update the view to only show the selected figure, so it's easier to see what should follow.
      selectFigure(figureID);

      return false; // not continue with <a link target
    }
                  
    // Re-filter, re-display figure and its following figures
    function updateView() {
      var selectedFigureElement = document.getElementById('figureName');
      selectedFigureName = selectedFigureElement.options[selectedFigureElement.selectedIndex].text;

      var output = [];

      sortedIds.forEach(function (id) {
        var figure = figures[id];
        if (!MatchFigure(figure)) return; // pass UI filter

        if (selectedFigureName != 'all' && figure['name'] != selectedFigureName)
          return;

        var filterElement = document.getElementById('startAlignment');
        var selectedAlignment = filterElement.options[filterElement.selectedIndex].text;
        filterElement = document.getElementById('startFoot');
        var selectedFoot = filterElement.options[filterElement.selectedIndex].text;
        filterElement = document.getElementById('startDirection');
        var selectedDirection = filterElement.options[filterElement.selectedIndex].text;
  
        if (selectedAlignment != 'all' && !contains(figure['startAlignment'], selectedAlignment))
          return;
  
        if (selectedFoot != 'all' && figure['startFoot'] != selectedFoot)
          return;
  
        if (selectedDirection != 'all' && figure['startDirection'] != selectedDirection)
          return;

        output.push('<a name="section_' + id + '"></a><span class="figure">');
        output.push(getFigureLink(id));
        output.push('</span>');

        var follows = getFollows(figure);
        output.push('<ol>');
        follows.forEach(function (follow) {
          output.push('<li>' + getFigureLink(follow[0], selectedFigureName == 'all'));
          if (follow[1])
            output.push(' (' + follow[1] + ')');
        });
        output.push('</ol>');
      });

      var element = document.getElementById('divFigureChart');
      element.innerHTML = output.join('');

      //outputDotSource(); // diagram too complicated to be useful
                            
      if (IS_GADGET) {
        gadgets.window.adjustHeight();
      }
    }

    function onLoad() {     
      initVars();
      initDisplay();
    }

    if (IS_GADGET) {
      _IG_RegisterOnloadHandler(onLoad);
    } else {
      window.onload = onLoad;
    }
  </script>
</head>

<body>
<div id='divLevels'></div>
<div id='divFiguresList'></div>

<span id='divSelectFigure'>
Starting alignment:
<select id='startAlignment' onchange="resetFigureListIndex();updateView();">
<option>all</option>
<option>DW</option>
<option>LOD</option>
<option>DC</option>
<option>Center</option>
<option>BDW</option>
<option>BLOD</option>
<option>BDC</option>
<option>Wall</option>
</select>
Free foot:
<select id='startFoot' onchange="resetFigureListIndex();updateView();">
<option>all</option>
<option>LF</option>
<option>RF</option>
</select>
Direction:
<select id='startDirection' onchange="resetFigureListIndex();updateView();">
<option>all</option>
<option>fwd</option>
<option>back</option>
</select>
</span><br>

<div id='divFigureChart'> </div>

<div id='divRoutine' style='display:bock'>
<table cellspacing=0 cellpadding=0>
<tr><td style="background: #ddf8cc;padding:4px">
<span id='idRoutineControls'>
Routine: 
<a id='idStartRoutine' href="#" onclick="return startRoutine();">Start New</a> &nbsp;
<a id='idPauseRoutine' style='display:none' href="#" onclick="return pauseRoutine();">Pause</a><a id='idContinueRoutine' style='display:none' href="#" onclick="return continueRoutine();">Continue</a> &nbsp;
</span>
</td></tr>
<tr><td style="background: #fff4c2;"> <span id='spanRoutine'></span> </td> </tr>
</table>
</div>

<textarea id='dotOutput' rows=10 cols=100 style='display:none'></textarea>
<pre id='debugOutput' style='display:block'></pre>

<div id='divVersion'></div>
</body> 

]]></Content>
</Module>


